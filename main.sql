-- Enter interactive psql mode via terminal by using -U for user
psql -U postgres

-- Enter superuser password

-- Create database using double-quotes to escape the hyphen characters
CREATE DATABASE "desafio-Felipe-Guajardo-117";

-- Connect to created database
\c "desafio-Felipe-Guajardo-117"

-- Create table schema with required structure, but added extra columns and constraints where necessary
CREATE TABLE clients (
  id SERIAL PRIMARY KEY,
  name VARCHAR NOT NULL,
  email VARCHAR(50) NOT NULL UNIQUE,
  phone VARCHAR(16),
  company VARCHAR(50) NOT NULL,
  priority SMALLINT NOT NULL CHECK(priority BETWEEN 1 AND 10),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Insert data into clients table with information generated by a random identity generator and a random number generator (for priority)
INSERT INTO clients 
(
  name, email, phone, company, priority
) 
VALUES 
('Patricia F. Wilson', 'PatriciaFWilson@dayrep.com', '+1 443 415 7766', 'Waccamaw Pottery', 9), 
('Leonard B. Barnhart', 'LeonardBBarnhart@teleworm.us', '+34 734 002 735', 'Lee Wards', 5), 
('Ann P. Russell', 'AnnPRussell@armyspy.com', '+598 9449 9375', 'Express Merchant Service', 10), 
('Virginia C. Torres', 'VirginiaCTorres@dayrep.com', '+1 678 858 1015', 'Laneco', 6), 
('Ronnie F. Bolan', 'RonnieFBolan@dayrep.com', '+1 573 855 1953', 'Prospa-Pal', 7)
;

-- Sort data by descending priority (and in case two entries have the same priority, sort again by ascending id value) and limit to 3 results max
SELECT * FROM clients ORDER BY priority DESC, id ASC LIMIT 3;

/* 
Select data from the clients table where priority is 9 or company is 'Laneco' (To comply with the requirement of creating a query 
that involves the OR operand so it would display only two entries)
*/

SELECT * FROM clients WHERE (priority = 9 OR company = 'Laneco');

-- EXTRA

-- Create function that will update a clients table entry, specifically the updated_at field with the time the update occured at
CREATE OR REPLACE FUNCTION update_clients_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger that will run aforementioned function
CREATE TRIGGER update_clients_trigger
BEFORE UPDATE ON clients
FOR EACH ROW
EXECUTE FUNCTION update_clients_updated_at();

-- We run a normal SELECT query to show current state of the clients table and the updated_at fields values
SELECT * FROM clients;

-- Now we update an entry in the clients table to show that the trigger and function are working properly
UPDATE clients SET company = 'Google' WHERE (id = 2);

/*
We run a normal SELECT query again to show that the entry with id = 2 has been updated with a new company, 
and by extension, it's updated_at field was updated thanks to the trigger
*/
SELECT * FROM clients;

-- We finally quit the postgreSQL interactive mode
\q